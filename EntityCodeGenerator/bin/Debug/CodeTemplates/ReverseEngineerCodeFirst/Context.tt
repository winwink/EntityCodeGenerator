<#@ template hostspecific="true" language="C#" #>
<#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using <#= code.EscapeNamespace(efHost.MappingNamespace) #>;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityContainer.Name #> : DbContext
    {
        static <#= efHost.EntityContainer.Name #>()
        {
            Database.SetInitializer<<#= efHost.EntityContainer.Name #>>(null);
        }

        public <#= efHost.EntityContainer.Name #>()
            : base("Name=<#= efHost.EntityContainer.Name #>")
        {
        }

		public <#= efHost.EntityContainer.Name #>(string connectionString):base(connectionString)
        {
		}

<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
        public DbSet<<#= RemoveSpecialString(set.ElementType.Name) #>> <#= RemoveSpecialString(set.Name) #> { get; set; }
<#
    }
#>

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in efHost.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(new <#= RemoveSpecialString(set.ElementType.Name) #>Map());
<#
    }
#>
        }
    }
}
<#+
	public string RemoveSpecialString(string input)
	{
		var result = input.Replace("_","");
		return result;
	}
#>
