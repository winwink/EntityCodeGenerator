<#@ template hostspecific="true" language="C#" #>
<#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
	var codeK2 = new CodeGenerationToolsForK2(this);
#>
<#@ import namespace="EntityCodeGenerator.Template"#>
<#@ import namespace="System.Collections.Generic"#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using SourceCode.SmartObjects.Services.ServiceSDK.Attributes;
using SourceCode.SmartObjects.Services.ServiceSDK.Objects;
using SourceCode.SmartObjects.Services.ServiceSDK.Types;
using <#= code.EscapeNamespace(efHost.ModelsNamespace) #>;
using <#= code.EscapeNamespace(efHost.ServiceNamespace) #>;
using <#= code.EscapeNamespace(efHost.CoreNamespace) #>;
<# 
	var keyType = code.Escape(efHost.PrimaryKey.TypeUsage);
    var keyName = efHost.PrimaryKey.Name;
	var entityName = efHost.EntityName;
 #>

namespace <#=code.EscapeNamespace(efHost.SvcNamespace)#>
{
    [ServiceObject("<#= entityName #>Svc", "<#= entityName #>Svc", "<#= entityName #>Svc")]
    public partial class <#= entityName #>Svc
    {
<#
	List<string> propertyNameList = new List<string>();
	
    foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);
		var typeK2 = codeK2.Escape(property.TypeUsage);
        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
		propertyNameList.Add("\""+code.Escape(property)+"\"");
#>
		[Property("<#= code.Escape(property) #>", SoType.<#= typeK2 #>, "<#= code.Escape(property) #>", "<#= code.Escape(property) #>")]
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> { get; set; }

<#
    }#>
    }

    public partial class <#= entityName #>Svc : SvcBase
    {
        public <#= entityName #>Svc()
        { }

        public static <#= entityName #>Svc GetFromEntity(<#= entityName #> entity)
        {
            <#= entityName #>Svc svc = new <#= entityName #>Svc();
            svc.ParseFromEntity(entity);
            return svc;
        }

        public void ParseFromEntity(<#= entityName #> entity)
        {
			if (entity == null) return;

<#
			foreach (var property in efHost.EntityType.Properties)
			{
				var name = code.Escape(property);
#>
			this.<#=name#> = entity.<#=name#>;
<#
			}#>
		}

        public <#= entityName #> ToEntity()
        {
            var entity = new <#= entityName #>();
<#
			foreach (var property in efHost.EntityType.Properties)
			{
				var name = code.Escape(property);
#>
			entity.<#=name#> = this.<#=name#>;
<#
			}#>
            return entity;
        }

        [Method("Read", MethodType.Read, "Read", "Read",
            new string[] { },
            new string[] { "System", "<#=keyName#>" },
            new string[] { <#=string.Join(",",propertyNameList)#>})]
        public <#= entityName#>Svc Read()
        {
			try
			{
				<#= entityName#>Service service = new <#= entityName#>Service(ConnString);
				var model = service.Read(<#=keyName#>);
				if (model == null)
				{
					return null;
				}

				ParseFromEntity(model);
			}
			catch(Exception ex)
			{
				Dictionary<string, object> variables = new Dictionary<string, object>() { };
                variables.Add("<#=keyName#>", <#=keyName#>);
                variables.Add("Msg", ex.Message);
				Logger.ServiceConfiguration = ServiceConfiguration;
                Logger.Write(System, RequestID, CurrentUser, "<#=entityName#>Svc.Read", LogLevel.ERROR, variables);
                throw ex;
			}
            return this;
        }

        [Method("Create", MethodType.Create, "Create", "Create",
            new string[] { },
            new string[] { "System", <#=string.Join(",",propertyNameList)#> },
            new string[] { "<#=keyName#>"})]
        public <#= entityName#>Svc Create()
        {
			try
			{
				<#= entityName#>Service service = new <#= entityName#>Service(ConnString);
				var entity = ToEntity();
<#				if(efHost.IsRecordEntity)
                {	
#>
                entity.CreateBy = CurrentUser;
                entity.CreateTime = DateTime.Now;
                entity.UpdateBy = CurrentUser;
                entity.UpdateTime = DateTime.Now;
<#
				}#>
				
<#				if(efHost.IsCreateEntity)
				{
#>
                entity.CreateBy = CurrentUser;
                entity.CreateTime = DateTime.Now;
<#				}
#>
				<#=keyName#> = service.Create(entity);
			}
			catch(Exception ex)
			{
				Dictionary<string, object> variables = new Dictionary<string, object>() { };
                variables.Add("<#=keyName#>", <#=keyName#>);
                variables.Add("Msg", ex.Message);
				Logger.ServiceConfiguration = ServiceConfiguration;
                Logger.Write(System, RequestID, CurrentUser, "<#=entityName#>Svc.Create", LogLevel.ERROR, variables);
                throw ex;
			}
            return this;
        }

        [Method("Update", MethodType.Update, "Update", "Update",
            new string[] { },
            new string[] { "System", <#=string.Join(",",propertyNameList)#> },
            new string[] { })]
        public void Update()
        {
			try
			{
				using (<#= efHost.EntityContainer.Name #> db = new <#= efHost.EntityContainer.Name #>(ConnString))
                {
                    var result = db.<#=entityName#>.Find(<#=keyName#>);
                    var entity = ToEntity();
<#				if (efHost.IsRecordEntity)
				{
#>
					entity.UpdateBy = CurrentUser;
					entity.UpdateTime = DateTime.Now;
<#				}
#>
                    SetChanged(result, entity);
                    db.SaveChanges();
                }
			}
			catch(Exception ex)
			{
				Dictionary<string, object> variables = new Dictionary<string, object>() { };
                variables.Add("<#=keyName#>", <#=keyName#>);
                variables.Add("Msg", ex.Message);
				Logger.ServiceConfiguration = ServiceConfiguration;
                Logger.Write(System, RequestID, CurrentUser, "<#=entityName#>Svc.Update", LogLevel.ERROR, variables);
                throw ex;
			}
        }

        [Method("CreateOrUpdate", MethodType.Update, "CreateOrUpdate", "CreateOrUpdate",
            new string[] { },
            new string[] { "System", <#=string.Join(",",propertyNameList)#> },
            new string[] { "<#=keyName#>"})]
        public <#= entityName#>Svc CreateOrUpdate()
        {
			try
			{
				using (<#= efHost.EntityContainer.Name #> db = new <#= efHost.EntityContainer.Name #>(ConnString))
                {
                    var result = db.<#=entityName#>.Find(<#=keyName#>);
                    var entity = ToEntity();
                    if (result == null)
                    {
<#					if(efHost.IsRecordEntity)
					{	
#>
						entity.CreateBy = CurrentUser;
						entity.CreateTime = DateTime.Now;
						entity.UpdateBy = CurrentUser;
						entity.UpdateTime = DateTime.Now;
<#
					}#>
<#					if(efHost.IsCreateEntity)
					{
#>
						entity.CreateBy = CurrentUser;
						entity.CreateTime = DateTime.Now;
<#					}
#>
                        db.Entry(entity).State = EntityState.Added;
                    }
                    else
                    {
<#					if (efHost.IsRecordEntity)
					{
#>
						entity.UpdateBy = CurrentUser;
						entity.UpdateTime = DateTime.Now;
<#					}
#>
                        SetChanged(result, entity);
                    }
                  
                    db.SaveChanges();
                }
			}
			catch(Exception ex)
			{
				Dictionary<string, object> variables = new Dictionary<string, object>() { };
                variables.Add("<#=keyName#>", <#=keyName#>);
                variables.Add("Msg", ex.Message);
				Logger.ServiceConfiguration = ServiceConfiguration;
                Logger.Write(System, RequestID, CurrentUser, "<#=entityName#>Svc.CreateOrUpdate", LogLevel.ERROR, variables);
                throw ex;
			}
            return this;
        }

        [Method("Delete", MethodType.Delete, "Delete", "Delete",
            new string[] { },
            new string[] { "System", "<#=keyName#>" },
            new string[] { })]
        public void Delete()
        {
			try
			{
				<#= entityName#>Service service = new <#= entityName#>Service(ConnString);
				service.Delete(<#=keyName#>);
			}
			catch(Exception ex)
			{
				Dictionary<string, object> variables = new Dictionary<string, object>() { };
                variables.Add("<#=keyName#>", <#=keyName#>);
                variables.Add("Msg", ex.Message);
				Logger.ServiceConfiguration = ServiceConfiguration;
                Logger.Write(System, RequestID, CurrentUser, "<#=entityName#>Svc.Delete", LogLevel.ERROR, variables);
                throw ex;
			}
        }

        [Method("List", MethodType.List, "List", "List",
            new string[] { },
            new string[] { "System", <#=string.Join(",",propertyNameList)#> },
            new string[] { <#=string.Join(",",propertyNameList)#> })]
        public List<<#= entityName#>Svc> List()
        {
			List<<#=entityName#>> entityList = new List<<#=entityName#>>();
			List<<#=entityName#>Svc> result = new List<<#=entityName#>Svc>();
			try
			{
				var conditions = BuildConditions();
				QueryDescriptor descriptor = new QueryDescriptor() { Conditions = conditions };
				using (<#= efHost.EntityContainer.Name #> db = new <#= efHost.EntityContainer.Name #>(ConnString))
				{
					entityList = db.<#=entityName#>.Query(descriptor).ToList() ;
				}

				result = entityList.Select(m => GetFromEntity(m)).ToList();
			}
			catch(Exception ex)
			{
				Dictionary<string, object> variables = new Dictionary<string, object>() { };
                variables.Add("<#=keyName#>", <#=keyName#>);
                variables.Add("Msg", ex.Message);
				Logger.ServiceConfiguration = ServiceConfiguration;
                Logger.Write(System, RequestID, CurrentUser, "<#=entityName#>Svc.List", LogLevel.ERROR, variables);
                throw ex;
			}
            return result;
        }

		private List<QueryCondition> BuildConditions()
        {
            List<QueryCondition> list = new List<QueryCondition>();
<#			foreach (var property in efHost.EntityType.Properties)
			{
				var typeUsage = code.Escape(property.TypeUsage);
				var propertyName = code.Escape(property);
				var queryOperator = GetOperator(typeUsage);
#>
			if (<#=propertyName#> != default(<#=typeUsage#>))
			{
				QueryCondition condition = new QueryCondition();
				condition.Key = "<#=propertyName#>";
				condition.Operator = QueryOperator.<#=queryOperator#>;
				condition.Value = <#=propertyName#>;
				condition.ValueType = typeof(<#=typeUsage#>).GetTypeName();
				list.Add(condition);
			}
<#
            }#>
            return list;
        }

		private void SetChanged(<#=entityName#> original, <#=entityName#> changed)
        {
<#			foreach (var property in efHost.EntityType.Properties)
			{
				var typeUsage = code.Escape(property.TypeUsage);
				var propertyName = code.Escape(property);
				var queryOperator = GetOperator(typeUsage);
#>
            if (<#=propertyName#> != default(<#=typeUsage#>))
            {
                original.<#=propertyName#> = changed.<#=propertyName#>;
            }
<#
            }#>
        }
    }
    
}
<#+
	public string GetOperator(string clrType)
    {
		if(clrType=="string")
        {
			return "CONTAINS";
		}
		else 
        {
			return "EQUAL";
		}
	}
#>